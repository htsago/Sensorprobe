import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import StandardScaler
from keras.utils import to_categorical
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.optimizers import Adam
from keras.regularizers import l2

# Load the data
data = pd.read_csv('model_new.csv')

# Preprocessing
X = data.drop(['class', 'activity'], axis=1)
y = data['class']
y_encoded = to_categorical(y, num_classes=3)

scaler = StandardScaler()
X = scaler.fit_transform(X)

# Reshape data into sequences
num_time_steps = 12
num_features = X.shape[1]
X_reshaped = []
y_reshaped = []

for i in range(len(X) - num_time_steps + 1):
    X_reshaped.append(X[i:i+num_time_steps])
    y_reshaped.append(y_encoded[i+num_time_steps-1])  # Use the label corresponding to the last time step

X_reshaped = np.array(X_reshaped)
y_reshaped = np.array(y_reshaped)

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_reshaped, y_reshaped, test_size=0.2, random_state=42)

# Define Callbacks
early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)
model_checkpoint = ModelCheckpoint('best_model.h5', monitor='val_accuracy', save_best_only=True)

# Build the LSTM model
model = Sequential()
model.add(LSTM(512, input_shape=(num_time_steps, num_features), return_sequences=True, kernel_regularizer=l2(0.001)))
model.add(Dropout(0.1))
model.add(LSTM(256, return_sequences=True, kernel_regularizer=l2(0.001)))
model.add(Dropout(0.1))
model.add(LSTM(128, kernel_regularizer=l2(0.001)))
model.add(Dropout(0.1))
model.add(Dense(3, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy'])

print(model.summary())

# Train the model
history = model.fit(
    X_train,
    y_train,
    batch_size=32,
    epochs=300,
    validation_data=(X_test, y_test),
    callbacks=[early_stopping, model_checkpoint]
)
