import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense,Flatten,Dropout,BatchNormalization
from sklearn.preprocessing import StandardScaler
from keras.utils import to_categorical
from sklearn.metrics import accuracy_score
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.optimizers import Adam

data = pd.read_csv('D:/Sensorprobe/model_new_01.csv')

data.head()

# Preprocessing
X = data.drop(['class', 'activity'], axis=1).values
y = data['class']
y_encoded = to_categorical(y, num_classes=6)

X

# Split segmented data into train, validation, and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, stratify=y_encoded)
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, stratify=y_train)

# Überprüfe die Form der Eingabedaten
print("Shape von X_train", X_train.shape)

print("Size of x:", len(X))
print("Size of y:", len(y))


print("X_train shape before reshaping:", X_train.shape)
print("X_test shape before reshaping:", X_test.shape)

# Build the model
model = Sequential()
model.add(Dense(64, activation='relu', input_dim=(X.shape[1])))
model.add(Flatten()) 
model.add(BatchNormalization())
model.add(Dropout(0.2))

model.add(Dense(32, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.2))

model.add(Dense(6, activation='softmax'))

# Compile the model with Adam optimizer
optimizer = Adam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])

print(model.summary())

# Define Callbacks
early_stopping = EarlyStopping(monitor='val_loss', patience=12, restore_best_weights=True)
model_checkpoint = ModelCheckpoint('best_model.h5', monitor='val_accuracy', save_best_only=True)

# Train the model
history = model.fit(
    X_train,
    y_train,
    batch_size=64,
    epochs=300,
    validation_data=(X_val, y_val),
    callbacks=[early_stopping, model_checkpoint],
    verbose=1
)

# Predict using the trained model
y_pred = model.predict(X_test)

test_loss, test_acc = model.evaluate(X_test, y_test)

data['activity'].value_counts().plot(kind='bar', title='Training examples by activity type')

def plot_activity(activity, df):
    data = df[df['activity'] == activity][['R1_1', 'R1_2', 'R1_3', 'R1_4', 'R1_5', 'R1_6', 'R3_1', 'R3_2', 'R3_3', 'R3_4', 'R3_5', 'R3_6', 'R4_1', 'R4_2', 'R4_3', 'R4_4', 'R4_5', 'R4_6']]
    axis = data.plot(subplots=True, figsize=(16, 12), title=activity)
    for ax in axis:
        ax.legend(loc='lower left', bbox_to_anchor=(1.0, 0.5))

plot_activity("drilling", data)
plot_activity("pause", data)
plot_activity("lifting", data)
plot_activity("painting", data)
plot_activity("screw", data)
plot_activity("sanding", data)



plt.plot(X) 
plt.xlabel('Time')
plt.ylabel('Sensor Value')
plt.title('Segmented Sensor Data')
plt.show()

# Convert predicted probabilities to binary labels
y_pred_labels = np.argmax(y_pred, axis=1)

# Convert one-hot encoded true labels to binary labels
y_true_labels = np.argmax(y_test, axis=1)
plt.plot(y_pred_labels)
plt.show()

plt.plot(y_true_labels)
plt.show()

total = 0  

output_lines = [
    f"Predicted Class: {pred}    True Class: {true}\n"
    for pred, true in zip(y_pred_labels, y_true_labels)
]

total = len(output_lines)

output = "\n".join(output_lines)
print(output)

# Calculate accuracy using accuracy_score
accuracy = accuracy_score(y_true_labels, y_pred_labels)

print("Total:", total)  
print("Accuracy:", accuracy)


# plot model performance
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs_range = range(1, len(history.epoch) + 1)

plt.figure(figsize=(15, 5))

plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Train Set')
plt.plot(epochs_range, val_acc, label='Val Set')
plt.legend(loc="best")
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Model Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Train Set')
plt.plot(epochs_range, val_loss, label='Val Set')
plt.legend(loc="best")
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Model Loss')

plt.tight_layout()
plt.show()
