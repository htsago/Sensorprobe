import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout, BatchNormalization
from sklearn.preprocessing import StandardScaler
from keras.utils import to_categorical
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.optimizers import Adam
from keras.regularizers import l2

# Daten einlesen
data = pd.read_csv('model.csv')

X = data.drop(['class', 'activity'], axis=1)
y = data['class']

# Feature Scaling
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Train-Test-Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Definiere Callbacks
early_stopping = EarlyStopping(monitor='val_loss', patience=20, restore_best_weights=True)
model_checkpoint = ModelCheckpoint('best_model.h5', monitor='val_accuracy', save_best_only=True)

model = Sequential()
model.add(LSTM(512, input_shape=(X_train.shape[1], 1), return_sequences=True, kernel_regularizer=l2(0.001)))
model.add(Dropout(0.2))
model.add(LSTM(256, return_sequences=True, kernel_regularizer=l2(0.001)))
model.add(Dropout(0.2))
model.add(LSTM(128, kernel_regularizer=l2(0.001)))
model.add(Dropout(0.2))
model.add(Dense(3, activation='softmax'))

# Batch-Normalization hinzuf√ºgen
model.add(BatchNormalization())

model.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy'])

print(model.summary())

# y_train und y_test in One-Hot kodieren
y_train_encoded = to_categorical(y_train, num_classes=3)
y_test_encoded = to_categorical(y_test, num_classes=3)

history = model.fit(
    X_train,
    y_train_encoded,
    batch_size=32,
    epochs=300,
    validation_data=(X_test, y_test_encoded),
    callbacks=[early_stopping, model_checkpoint]
)

# Modell evaluieren
model.load_weights('best_model.h5')

y_pred = model.predict(X_test)
y_pred_labels = np.argmax(y_pred, axis=1)

accuracy = accuracy_score(y_test, y_pred_labels)
print("Test Genauigkeit:", accuracy)
